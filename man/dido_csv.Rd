% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dido-csv.R
\name{dido_csv}
\alias{dido_csv}
\title{Génère les lignes d'entête du CSV augmenté}
\usage{
dido_csv(
  data,
  params = list(),
  locale = readr::default_locale(),
  cog_year = format(Sys.time(), "\%Y")
)
}
\arguments{
\item{data}{le dataframe à augmenter}

\item{params}{une liste nommée décrivant les caractéristiques des colonnes :

\if{html}{\out{<div class="sourceCode r">}}\preformatted{list(
  COL1 = list(description = "une description"),
  COL2 = list(unit = "MWh")
)
}\if{html}{\out{</div>}}

Les caractéristiques disponibles sont :
\itemize{
\item \code{name}: le nom de la colonne
\item \code{description}: la description de la colonne
\item \code{type}: nombre, entier, texte, ...
\item \code{unit}: l'unité de la colonne
}

Le nom de la colonne peut être une expression rationnelle :

\if{html}{\out{<div class="sourceCode r">}}\preformatted{list(
  COL     = list(description = "une description"),
  `COL.*` = list(unit = "MWh")
)
}\if{html}{\out{</div>}}

La première colonne correspondante est utilisée, \strong{mettez toujours vos
expressions rationnelles à la fin}.

La valeur du champ \code{description} est évaluée par glue::glue avec un
paramètre \code{name} qui correspond au nom de la variable du dataframe
d'origine.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{list(
  COL     = list(description = "une description"),
  `COL.*` = list(
    unit = "MWh",
    description = "une description \{string::str_extract(name, '\\\\d\{4\}')\}"
  )
)
}\if{html}{\out{</div>}}}

\item{locale}{la locale à utiliser. Le seul élément à configurer à ce niveau
est le séparateur décimal. Par défaut c'est le point (\code{.}). Pour
sélectionner la virgule vous pouvez utiliser :

\if{html}{\out{<div class="sourceCode r">}}\preformatted{locale = locale(decimal_mark = ",")
}\if{html}{\out{</div>}}}

\item{cog_year}{le millésime du COG utilisé si besoin. Par défaut prend
l'année en cours}
}
\value{
un dataframe avec les 4 lignes de description du csv augmenté
}
\description{
Génère un dataframe avec les lignes d'entêtes du CSV augmenté comme premières
lignes.
}
\details{
Cette fonction essaye de deviner le type des colonnes pour leur donner un
type DiDo de base :\tabular{ll}{
   type R \tab type en sortie \cr
   double \tab nombre \cr
   integer \tab entier \cr
   date \tab jour \cr
   logical \tab booleen \cr
   tous les autres \tab texte \cr
}


** il est fortement déconseillé d'utiliser le type DiDo
\code{nombre}. Utilisez plutôt un nombre avec précision comme par exemple
\code{nombre(2)}**

Certains noms de variable sont connus par didoscalim qui génère
automatiquement le type et la description. La liste complète de ces
variables et des types/descriptions associés est :\tabular{lll}{
   nom de la variable \tab type \tab description \cr
   REGION \tab cog_region_AAAA \tab Code de la région \cr
   DEPARTEMENT \tab cog_departement_AAAA \tab Code du département \cr
   COMMUNE \tab cog_commune_AAAA \tab Code de la commune \cr
   EPCI \tab cog_epci_AAAA \tab Code de l'EPCI \cr
   IRIS \tab cog_iris_AAAA \tab Code de l'IRIS \cr
   ANNEE \tab n/a \tab Millésimes des données \cr
   MOIS \tab n/a \tab mois des données \cr
}


L'année \code{AAAA} est par défaut l'année courante, vous pouvez la modifier en
passant le paramètre \code{cog_year}
}
\examples{
data <- data.frame(
  OPERATEUR = c("nom1", "nom2"),
  COMMUNE = c("29000", "35000"),
  CONSO = c(1, 2)
)
params <- list(
  OPERATEUR = list(description = "L'opérateur"),
  CONSO = list(name = "CONSOMMATION", description = "La consommation", unit = "Mwh")
)
dido_csv(data, params = params)

data <- data.frame(
  DONNEES_2021 = c("1,4", "1,5"),
  DONNEES_2022 = c("1,3", "1,8")
)
params <- list(
  `DONNEES_.*` = list(
    description = 'description pour {stringr::str_extract(name, "\\\\\\\\d{4}")}'
  )
)
dido_csv(data, params = params, locale = locale(decimal_mark = ","))
}
\seealso{
En complément, vous pouvez lire : \href{https://mtes-mct.github.io/didoscalim/articles/csv-augmente.html}{la vignette dédiée à la génération des fichiers augmentés}

Et la documentation de l'API :
\itemize{
\item \href{https://cgdd.gitlab-pages.din.developpement-durable.gouv.fr/sdsed-bun/datalake/api/040-csvfile/}{la description d'un fichier csv augmenté},
\item \href{https://cgdd.gitlab-pages.din.developpement-durable.gouv.fr/sdsed-bun/datalake/api/210-headers/}{la liste des entêtes utilisables}
}

Other csv: 
\code{\link{dido_read_delim}()},
\code{\link{dido_write_csv}()}
}
\concept{csv}
